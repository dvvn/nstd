#if 0
//#define NSTD_STRING_PROVIDE_IMPL(_TYPE_)

//#define NSTD_STRING_PROVIDE_IMPL(_TYPE_) \
//template struct basic_string<_TYPE_>;\
//template struct basic_string_view<_TYPE_>;

#define NSTD_STRING_PROVIDE_BAISC\
	NSTD_STRING_PROVIDE_IMPL(char);\
	NSTD_STRING_PROVIDE_IMPL(char16_t);\
	NSTD_STRING_PROVIDE_IMPL(char32_t);\
	NSTD_STRING_PROVIDE_IMPL(wchar_t);

#ifdef __cpp_lib_char8_t
#define NSTD_STRING_PROVIDE_EX\
	NSTD_STRING_PROVIDE_IMPL(char8_t);
#else
#define NSTD_STRING_PROVIDE_EX
#endif

#define NSTD_STRING_PROVIDE\
	NSTD_STRING_PROVIDE_BAISC\
	NSTD_STRING_PROVIDE_EX
#endif

//-----------

//#define NSTD_STRING_DECLARE_IMPL(_TYPE_,_PREFIX_,_POSTFIX_)\
//using hashed_##_PREFIX_##string##_POSTFIX_ = basic_hashed_string##_POSTFIX_##<_TYPE_>;

#define NSTD_DECLARE_STRING_IMPL2(_TYPE_,_PREFIX_)\
	NSTD_STRING_DECLARE_IMPL(_TYPE_,_PREFIX_,)\
	NSTD_STRING_DECLARE_IMPL(_TYPE_,_PREFIX_,_view)

#define NSTD_UNUSED

#define NSTD_DECLARE_STRING_BASIC\
	NSTD_DECLARE_STRING_IMPL2(char,NSTD_UNUSED);\
	NSTD_DECLARE_STRING_IMPL2(char16_t,u16);\
	NSTD_DECLARE_STRING_IMPL2(char32_t,u32);\
	NSTD_DECLARE_STRING_IMPL2(wchar_t,w);

#ifdef __cpp_lib_char8_t
#define NSTD_STRING_DECLARE_EX\
	NSTD_DECLARE_STRING_IMPL2(char8_t,u8);
#else
#define NSTD_STRING_DECLARE_EX
#endif

#define NSTD_STRING_DECLARE\
	NSTD_DECLARE_STRING_BASIC\
	NSTD_STRING_DECLARE_EX